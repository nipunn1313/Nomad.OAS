/*
 * Nomad
 *
 * Nomad OpenApi specification
 *
 * The version of the OpenAPI document: 0.11.0
 * 
 * Generated by: https://openapi-generator.tech
 */




#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct CsiVolume {
    #[serde(rename = "ID", skip_serializing_if = "Option::is_none")]
    pub ID: Option<String>,
    #[serde(rename = "Name", skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(rename = "ExternalID", skip_serializing_if = "Option::is_none")]
    pub external_id: Option<String>,
    #[serde(rename = "Namespace", skip_serializing_if = "Option::is_none")]
    pub namespace: Option<String>,
    #[serde(rename = "Topologies", skip_serializing_if = "Option::is_none")]
    pub topologies: Option<Vec<crate::models::CsiTopology>>,
    #[serde(rename = "AccessMode", skip_serializing_if = "Option::is_none")]
    pub access_mode: Option<String>,
    #[serde(rename = "AttachmentMode", skip_serializing_if = "Option::is_none")]
    pub attachment_mode: Option<String>,
    #[serde(rename = "MountOptions", skip_serializing_if = "Option::is_none")]
    pub mount_options: Option<Box<crate::models::CsiMountOptions>>,
    #[serde(rename = "ReadAllocs", skip_serializing_if = "Option::is_none")]
    pub read_allocs: Option<::std::collections::HashMap<String, crate::models::Allocation>>,
    #[serde(rename = "WriteAllocs", skip_serializing_if = "Option::is_none")]
    pub write_allocs: Option<::std::collections::HashMap<String, crate::models::Allocation>>,
    #[serde(rename = "Allocations", skip_serializing_if = "Option::is_none")]
    pub allocations: Option<Vec<crate::models::AllocationListStub>>,
    #[serde(rename = "Schedulable", skip_serializing_if = "Option::is_none")]
    pub schedulable: Option<bool>,
    #[serde(rename = "PluginID", skip_serializing_if = "Option::is_none")]
    pub plugin_id: Option<String>,
    #[serde(rename = "Provider", skip_serializing_if = "Option::is_none")]
    pub provider: Option<String>,
    #[serde(rename = "ProviderVersion", skip_serializing_if = "Option::is_none")]
    pub provider_version: Option<String>,
    #[serde(rename = "ControllerRequired", skip_serializing_if = "Option::is_none")]
    pub controller_required: Option<bool>,
    #[serde(rename = "ControllersHealthy", skip_serializing_if = "Option::is_none")]
    pub controllers_healthy: Option<i32>,
    #[serde(rename = "ControllersExpected", skip_serializing_if = "Option::is_none")]
    pub controllers_expected: Option<i32>,
    #[serde(rename = "NodesHealthy", skip_serializing_if = "Option::is_none")]
    pub nodes_healthy: Option<i32>,
    #[serde(rename = "NodesExpected", skip_serializing_if = "Option::is_none")]
    pub nodes_expected: Option<i32>,
    #[serde(rename = "ResourceExhausted", skip_serializing_if = "Option::is_none")]
    pub resource_exhausted: Option<String>,
    #[serde(rename = "CreateIndex", skip_serializing_if = "Option::is_none")]
    pub create_index: Option<i32>,
    #[serde(rename = "ModifyIndex", skip_serializing_if = "Option::is_none")]
    pub modify_index: Option<i32>,
}

impl CsiVolume {
    pub fn new() -> CsiVolume {
        CsiVolume {
            ID: None,
            name: None,
            external_id: None,
            namespace: None,
            topologies: None,
            access_mode: None,
            attachment_mode: None,
            mount_options: None,
            read_allocs: None,
            write_allocs: None,
            allocations: None,
            schedulable: None,
            plugin_id: None,
            provider: None,
            provider_version: None,
            controller_required: None,
            controllers_healthy: None,
            controllers_expected: None,
            nodes_healthy: None,
            nodes_expected: None,
            resource_exhausted: None,
            create_index: None,
            modify_index: None,
        }
    }
}


