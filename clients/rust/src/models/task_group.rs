/*
 * Nomad
 *
 * Nomad OpenApi specification
 *
 * The version of the OpenAPI document: 0.11.0
 * 
 * Generated by: https://openapi-generator.tech
 */




#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct TaskGroup {
    #[serde(rename = "Name", skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(rename = "Count", skip_serializing_if = "Option::is_none")]
    pub count: Option<i32>,
    #[serde(rename = "Constraints", skip_serializing_if = "Option::is_none")]
    pub constraints: Option<Vec<crate::models::Constraint>>,
    #[serde(rename = "Affinities", skip_serializing_if = "Option::is_none")]
    pub affinities: Option<Vec<crate::models::Affinity>>,
    #[serde(rename = "Tasks", skip_serializing_if = "Option::is_none")]
    pub tasks: Option<Vec<crate::models::Task>>,
    #[serde(rename = "Spreads", skip_serializing_if = "Option::is_none")]
    pub spreads: Option<Vec<crate::models::Spread>>,
    #[serde(rename = "Volumes", skip_serializing_if = "Option::is_none")]
    pub volumes: Option<::std::collections::HashMap<String, crate::models::VolumeRequest>>,
    #[serde(rename = "RestartPolicy", skip_serializing_if = "Option::is_none")]
    pub restart_policy: Option<Box<crate::models::RestartPolicy>>,
    #[serde(rename = "ReschedulePolicy", skip_serializing_if = "Option::is_none")]
    pub reschedule_policy: Option<Box<crate::models::ReschedulePolicy>>,
    #[serde(rename = "EphemeralDisk", skip_serializing_if = "Option::is_none")]
    pub ephemeral_disk: Option<Box<crate::models::EphemeralDisk>>,
    #[serde(rename = "Update", skip_serializing_if = "Option::is_none")]
    pub update: Option<Box<crate::models::UpdateStrategy>>,
    #[serde(rename = "Migrate", skip_serializing_if = "Option::is_none")]
    pub migrate: Option<Box<crate::models::MigrateStrategy>>,
    #[serde(rename = "Networks", skip_serializing_if = "Option::is_none")]
    pub networks: Option<Vec<crate::models::NetworkResource>>,
    #[serde(rename = "Meta", skip_serializing_if = "Option::is_none")]
    pub meta: Option<::std::collections::HashMap<String, String>>,
    #[serde(rename = "Services", skip_serializing_if = "Option::is_none")]
    pub services: Option<Vec<crate::models::Service>>,
    #[serde(rename = "ShutdownDelay", skip_serializing_if = "Option::is_none")]
    pub shutdown_delay: Option<i64>,
    #[serde(rename = "Scaling", skip_serializing_if = "Option::is_none")]
    pub scaling: Option<Box<crate::models::ScalingPolicy>>,
    #[serde(rename = "StopAfterClientDisconnect", skip_serializing_if = "Option::is_none")]
    pub stop_after_client_disconnect: Option<i64>,
    #[serde(rename = "MaxClientDisconnect", skip_serializing_if = "Option::is_none")]
    pub max_client_disconnect: Option<i64>,
}

impl TaskGroup {
    pub fn new() -> TaskGroup {
        TaskGroup {
            name: None,
            count: None,
            constraints: None,
            affinities: None,
            tasks: None,
            spreads: None,
            volumes: None,
            restart_policy: None,
            reschedule_policy: None,
            ephemeral_disk: None,
            update: None,
            migrate: None,
            networks: None,
            meta: None,
            services: None,
            shutdown_delay: None,
            scaling: None,
            stop_after_client_disconnect: None,
            max_client_disconnect: None,
        }
    }
}


